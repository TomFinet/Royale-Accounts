# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-07-06 16:07
from __future__ import unicode_literals

import accounts.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('device', models.CharField(choices=[('A', 'Android'), ('I', 'iOS'), ('B', 'Android or iOS')], max_length=7)),
                ('arena', models.CharField(choices=[('GS', 'Goblin Stadium'), ('BP', 'Bone Pit'), ('BB', 'Barbarian Bowl'), ('PP', "P.E.K.K.A's Playhouse"), ('SV', 'Spell Valley'), ('BW', "Builder's Workshop"), ('RA', 'Royal Arena'), ('FP', 'Frozen Peak'), ('JA', 'Jungle Arena'), ('HM', 'Hog Mountain'), ('EV', 'Electro Valley'), ('LA', 'Legendary Arena'), ('C1', 'Challenger 1'), ('C2', 'Challenger 2'), ('C3', 'Challenger 3'), ('M1', 'Master 1'), ('M2', 'Master 2'), ('M3', 'Master 3'), ('C', 'Champion'), ('GC', 'Grand Champion'), ('UC', 'Ultimate Champion')], max_length=2)),
                ('arena_img', models.ImageField(blank=True, null=True, upload_to=accounts.models.image_upload_path)),
                ('trophies', models.SmallIntegerField()),
                ('name_change', models.BooleanField()),
                ('king_tower', models.SmallIntegerField()),
                ('gold', models.IntegerField()),
                ('gems', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='AccountImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=accounts.models.image_upload_path)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.Account')),
            ],
        ),
        migrations.CreateModel(
            name='SpellCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('R', 'Rage'), ('Z', 'Zap'), ('A', 'Arrows'), ('F', 'Fireball'), ('L', 'Lightning'), ('RO', 'Rocket'), ('FR', 'Freeze')], max_length=2)),
                ('level', models.SmallIntegerField()),
                ('unlocked', models.BooleanField()),
                ('damage', models.SmallIntegerField(blank=True, null=True)),
                ('crown_tower_damage', models.SmallIntegerField(blank=True, null=True)),
                ('duration', models.SmallIntegerField(blank=True, null=True)),
                ('radius', models.DecimalField(decimal_places=1, max_digits=2)),
                ('boost', models.SmallIntegerField(blank=True, null=True)),
                ('healing_per_second', models.SmallIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TroopCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('W', 'Witch'), ('SG', 'Spear Goblins'), ('B', 'Bomber'), ('W', 'Witch'), ('M', 'Musketeer'), ('G', 'Giant'), ('SA', 'Skeleton Army'), ('K', 'Knight'), ('A', 'Archers'), ('G', 'Goblins'), ('V', 'Valkyrie'), ('MP', 'Mini P.E.K.K.A'), ('BD', 'Baby Dragon'), ('P', 'Prince'), ('GB', 'Goblin Barrel'), ('MI', 'Minions'), ('S', 'Skeletons'), ('BA', 'Balloon'), ('GS', 'Giant Skeleton'), ('BA', 'Barbarians'), ('MH', 'Minion Horde'), ('HR', 'Hog Rider'), ('PK', 'P.E.K.K.A'), ('L', 'Lava Hound'), ('F', 'Fire Spirits'), ('WI', 'Wizard')], max_length=2)),
                ('level', models.SmallIntegerField()),
                ('unlocked', models.BooleanField()),
                ('hitpoints', models.SmallIntegerField()),
                ('damage_per_second', models.SmallIntegerField()),
                ('damage', models.SmallIntegerField(blank=True, null=True)),
                ('area_damage', models.SmallIntegerField(blank=True, null=True)),
                ('hit_speed', models.DecimalField(decimal_places=1, max_digits=2)),
                ('targets', models.CharField(choices=[('E', 'Air and Ground'), ('A', 'Air'), ('G', 'Ground'), ('B', 'Buildings')], max_length=1)),
                ('movement_speed', models.CharField(choices=[('S', 'Slow'), ('M', 'Medium'), ('F', 'Fast'), ('X', 'Very fast')], max_length=2)),
                ('attack_range', models.SmallIntegerField()),
                ('deploy_time', models.DecimalField(decimal_places=1, max_digits=2)),
                ('count', models.SmallIntegerField(blank=True, null=True)),
                ('lifetime', models.SmallIntegerField(blank=True, null=True)),
                ('charge_damage', models.SmallIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='account',
            name='spell_deck',
            field=models.ManyToManyField(blank=True, to='accounts.SpellCard'),
        ),
        migrations.AddField(
            model_name='account',
            name='troop_deck',
            field=models.ManyToManyField(blank=True, to='accounts.TroopCard'),
        ),
    ]
